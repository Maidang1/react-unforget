// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component fixtures applyModification fixture_1 1`] = `
"import { useCreateCache$unforget } from "@react-unforget/runtime";
export default function SimpleJSX() {
  const [_$unforgetCache, _$unforgetCommit, _$unforgetNull] = useCreateCache$unforget(
  /*
  0 => _unwrappedJsxEl
  */
  1);
  let _unwrappedJsxEl = _$unforgetCache[0].v;
  const _segment = () => {
    _unwrappedJsxEl = <div>Hello world!</div>;
  };
  if (_$unforgetCache[0].n) {
    _segment();
    _$unforgetCache[0].e(_unwrappedJsxEl);
  }
  _$unforgetCommit();
  return _unwrappedJsxEl;
}"
`;

exports[`Component fixtures applyModification fixture_2 1`] = `
"import { useCreateCache$unforget } from "@react-unforget/runtime";
const SimpleJSXWithArrowFunction = () => {
  const [_$unforgetCache, _$unforgetCommit, _$unforgetNull] = useCreateCache$unforget(
  /*
  0 => _unwrappedJsxEl
  */
  1);
  let _unwrappedJsxEl = _$unforgetCache[0].v;
  const _segment = () => {
    _unwrappedJsxEl = <div>Hello world!</div>;
  };
  if (_$unforgetCache[0].n) {
    _segment();
    _$unforgetCache[0].e(_unwrappedJsxEl);
  }
  _$unforgetCommit();
  return _unwrappedJsxEl;
};
export default SimpleJSXWithArrowFunction;"
`;

exports[`Component fixtures applyModification fixture_3 1`] = `
"import { useCreateCache$unforget } from "@react-unforget/runtime";
const SimpleJSXWithFunctionExpression = function () {
  const [_$unforgetCache, _$unforgetCommit, _$unforgetNull] = useCreateCache$unforget(
  /*
  0 => _unwrappedJsxEl
  */
  1);
  let _unwrappedJsxEl = _$unforgetCache[0].v;
  const _segment = () => {
    _unwrappedJsxEl = <div>Hello world!</div>;
  };
  if (_$unforgetCache[0].n) {
    _segment();
    _$unforgetCache[0].e(_unwrappedJsxEl);
  }
  _$unforgetCommit();
  return _unwrappedJsxEl;
};
export default SimpleJSXWithFunctionExpression;"
`;

exports[`Component fixtures applyModification fixture_4 1`] = `
"import { useCreateCache$unforget } from "@react-unforget/runtime";
import { useState } from "react";
export default function Counter() {
  const [_$unforgetCache, _$unforgetCommit, _$unforgetNull] = useCreateCache$unforget(
  /*
  0 => _unwrappedJsxEl4
  1 => _unwrappedJsxEl
  2 => setState
  3 => _unwrapped
  4 => state
  5 => _unwrappedJsxEl2
  6 => _unwrappedJsxEl3
  */
  7);
  let _unwrapped = _$unforgetCache[3].v;
  const _segment = () => {
    _unwrapped = useState(0);
  };
  let setState = _$unforgetCache[2].v;
  const _segment2 = () => {
    setState = _unwrapped[1];
  };
  let state = _$unforgetCache[4].v;
  const _segment3 = () => {
    state = _unwrapped[0];
  };
  let _unwrappedJsxEl = _$unforgetCache[1].v;
  const _segment4 = () => {
    _unwrappedJsxEl = <button onClick={() => setState(state + 1)}>Increment</button>;
  };
  let _unwrappedJsxEl2 = _$unforgetCache[5].v;
  const _segment5 = () => {
    _unwrappedJsxEl2 = <span>Count: {state}</span>;
  };
  let _unwrappedJsxEl3 = _$unforgetCache[6].v;
  const _segment6 = () => {
    _unwrappedJsxEl3 = <div>
        {_unwrappedJsxEl2}
      </div>;
  };
  let _unwrappedJsxEl4 = _$unforgetCache[0].v;
  const _segment7 = () => {
    _unwrappedJsxEl4 = <div>
      {_unwrappedJsxEl}
      {_unwrappedJsxEl3}
    </div>;
  };
  _segment();
  _$unforgetCache[3].e(_unwrapped);
  if (_$unforgetCache[2].n || _unwrapped !== _$unforgetCache[3].v || _unwrapped[1] !== _$unforgetCache[3].v[1]) {
    _segment2();
    _$unforgetCache[2].e(setState);
  }
  if (_$unforgetCache[4].n || _unwrapped[0] !== _$unforgetCache[3].v[0] || _unwrapped !== _$unforgetCache[3].v) {
    _segment3();
    _$unforgetCache[4].e(state);
  }
  if (_$unforgetCache[1].n || setState !== _$unforgetCache[2].v || state !== _$unforgetCache[4].v) {
    _segment4();
    _$unforgetCache[1].e(_unwrappedJsxEl);
  }
  if (_$unforgetCache[5].n || state !== _$unforgetCache[4].v) {
    _segment5();
    _$unforgetCache[5].e(_unwrappedJsxEl2);
  }
  if (_$unforgetCache[6].n || _unwrappedJsxEl2 !== _$unforgetCache[5].v) {
    _segment6();
    _$unforgetCache[6].e(_unwrappedJsxEl3);
  }
  if (_$unforgetCache[0].n || _unwrappedJsxEl !== _$unforgetCache[1].v || _unwrappedJsxEl3 !== _$unforgetCache[6].v) {
    _segment7();
    _$unforgetCache[0].e(_unwrappedJsxEl4);
  }
  _$unforgetCommit();
  return _unwrappedJsxEl4;
}"
`;

exports[`Component fixtures applyModification fixture_5 1`] = `
"import { useCreateCache$unforget } from "@react-unforget/runtime";
import { useState } from "react";
export default function CounterWithMutationTracking() {
  const [_$unforgetCache, _$unforgetCommit, _$unforgetNull] = useCreateCache$unforget(
  /*
  0 => state
  1 => _unwrapped
  2 => setState
  3 => _unwrappedJsxEl4
  4 => _unwrappedJsxEl
  5 => _unwrappedJsxEl3
  6 => _unwrappedJsxEl2
  7 => text
  */
  8);
  let _unwrapped = _$unforgetCache[1].v;
  const _segment = () => {
    _unwrapped = useState(0);
  };
  let text = _$unforgetCache[7].v;
  const _segment2 = () => {
    text = "The number is: ";
  };
  let setState = _$unforgetCache[2].v;
  const _segment3 = () => {
    setState = _unwrapped[1];
  };
  let state = _$unforgetCache[0].v;
  const _segment4 = () => {
    state = _unwrapped[0];
  };
  const _segment5 = () => {
    if (state % 2 === 0) {
      const _segment12 = () => {
        text += "even";
      };
      _segment12();
    } else {
      const _segment13 = () => {
        text += "odd";
      };
      _segment13();
    }
  };
  let _unwrappedJsxEl = _$unforgetCache[4].v;
  const _segment6 = () => {
    _unwrappedJsxEl = <button onClick={() => setState(state + 1)}>Increment</button>;
  };
  let _unwrappedJsxEl2 = _$unforgetCache[6].v;
  const _segment7 = () => {
    _unwrappedJsxEl2 = <span>Count: {state}</span>;
  };
  let _unwrappedJsxEl3 = _$unforgetCache[5].v;
  const _segment8 = () => {
    _unwrappedJsxEl3 = <div>
        {_unwrappedJsxEl2} {text}
      </div>;
  };
  let _unwrappedJsxEl4 = _$unforgetCache[3].v;
  const _segment9 = () => {
    _unwrappedJsxEl4 = <div>
      {_unwrappedJsxEl}
      {_unwrappedJsxEl3}
    </div>;
  };
  _segment();
  _$unforgetCache[1].e(_unwrapped);
  if (_$unforgetCache[7].n) {
    _segment2();
    _$unforgetCache[7].e(text);
  }
  if (_$unforgetCache[2].n || _unwrapped[1] !== _$unforgetCache[1].v[1] || _unwrapped !== _$unforgetCache[1].v) {
    _segment3();
    _$unforgetCache[2].e(setState);
  }
  if (_$unforgetCache[0].n || _unwrapped !== _$unforgetCache[1].v || _unwrapped[0] !== _$unforgetCache[1].v[0]) {
    _segment4();
    _$unforgetCache[0].e(state);
  }
  if (state !== _$unforgetCache[0].v) {
    _segment5();
  }
  if (_$unforgetCache[4].n || setState !== _$unforgetCache[2].v || state !== _$unforgetCache[0].v) {
    _segment6();
    _$unforgetCache[4].e(_unwrappedJsxEl);
  }
  if (_$unforgetCache[6].n || state !== _$unforgetCache[0].v) {
    _segment7();
    _$unforgetCache[6].e(_unwrappedJsxEl2);
  }
  if (_$unforgetCache[5].n || _unwrappedJsxEl2 !== _$unforgetCache[6].v || text !== _$unforgetCache[7].v) {
    _segment8();
    _$unforgetCache[5].e(_unwrappedJsxEl3);
  }
  if (_$unforgetCache[3].n || _unwrappedJsxEl !== _$unforgetCache[4].v || _unwrappedJsxEl3 !== _$unforgetCache[5].v) {
    _segment9();
    _$unforgetCache[3].e(_unwrappedJsxEl4);
  }
  _$unforgetCommit();
  return _unwrappedJsxEl4;
}"
`;

exports[`Component fixtures applyModification fixture_6 1`] = `
"import { useCreateCache$unforget } from "@react-unforget/runtime";
import { useState } from "react";
function InnerComponentWithProps(_props) {
  const [_$unforgetCache, _$unforgetCommit, _$unforgetNull] = useCreateCache$unforget(
  /*
  0 => _unwrappedJsxEl2
  1 => _unwrappedJsxEl
  2 => count
  3 => _props
  4 => text
  */
  5);
  let text = _$unforgetCache[4].v;
  const _segment = () => {
    text = _props.text;
  };
  let count = _$unforgetCache[2].v;
  const _segment2 = () => {
    count = _props.count;
  };
  let _unwrappedJsxEl = _$unforgetCache[1].v;
  const _segment3 = () => {
    _unwrappedJsxEl = <span>Count: {count}</span>;
  };
  let _unwrappedJsxEl2 = _$unforgetCache[0].v;
  const _segment4 = () => {
    _unwrappedJsxEl2 = <div>
      {_unwrappedJsxEl} {text}
    </div>;
  };
  if (_$unforgetCache[4].n || _props.text !== _$unforgetCache[3].v.text || _props !== _$unforgetCache[3].v) {
    _segment();
    _$unforgetCache[4].e(text);
  }
  if (_$unforgetCache[2].n || _props !== _$unforgetCache[3].v || _props.count !== _$unforgetCache[3].v.count) {
    _segment2();
    _$unforgetCache[2].e(count);
  }
  if (_$unforgetCache[1].n || count !== _$unforgetCache[2].v) {
    _segment3();
    _$unforgetCache[1].e(_unwrappedJsxEl);
  }
  if (_$unforgetCache[0].n || _unwrappedJsxEl !== _$unforgetCache[1].v || text !== _$unforgetCache[4].v) {
    _segment4();
    _$unforgetCache[0].e(_unwrappedJsxEl2);
  }
  _$unforgetCommit();
  return _unwrappedJsxEl2;
}
export default function CounterWithInnerComponents() {
  const [_$unforgetCache2, _$unforgetCommit2, _$unforgetNull2] = useCreateCache$unforget(
  /*
  0 => state
  1 => _unwrapped
  2 => setState
  3 => _unwrappedJsxEl5
  4 => _unwrappedJsxEl3
  5 => _unwrappedJsxEl4
  6 => text
  */
  7);
  let _unwrapped = _$unforgetCache2[1].v;
  const _segment7 = () => {
    _unwrapped = useState(0);
  };
  let text = _$unforgetCache2[6].v;
  const _segment8 = () => {
    text = "The number is: ";
  };
  let setState = _$unforgetCache2[2].v;
  const _segment9 = () => {
    setState = _unwrapped[1];
  };
  let state = _$unforgetCache2[0].v;
  const _segment10 = () => {
    state = _unwrapped[0];
  };
  const _segment11 = () => {
    if (state % 2 === 0) {
      const _segment17 = () => {
        text += "even";
      };
      _segment17();
    } else {
      const _segment18 = () => {
        text += "odd";
      };
      _segment18();
    }
  };
  let _unwrappedJsxEl3 = _$unforgetCache2[4].v;
  const _segment12 = () => {
    _unwrappedJsxEl3 = <button onClick={() => setState(state + 1)}>Increment</button>;
  };
  let _unwrappedJsxEl4 = _$unforgetCache2[5].v;
  const _segment13 = () => {
    _unwrappedJsxEl4 = <InnerComponentWithProps count={state} text={text} />;
  };
  let _unwrappedJsxEl5 = _$unforgetCache2[3].v;
  const _segment14 = () => {
    _unwrappedJsxEl5 = <div>
      {_unwrappedJsxEl3}
      {_unwrappedJsxEl4}
    </div>;
  };
  _segment7();
  _$unforgetCache2[1].e(_unwrapped);
  if (_$unforgetCache2[6].n) {
    _segment8();
    _$unforgetCache2[6].e(text);
  }
  if (_$unforgetCache2[2].n || _unwrapped[1] !== _$unforgetCache2[1].v[1] || _unwrapped !== _$unforgetCache2[1].v) {
    _segment9();
    _$unforgetCache2[2].e(setState);
  }
  if (_$unforgetCache2[0].n || _unwrapped !== _$unforgetCache2[1].v || _unwrapped[0] !== _$unforgetCache2[1].v[0]) {
    _segment10();
    _$unforgetCache2[0].e(state);
  }
  if (state !== _$unforgetCache2[0].v) {
    _segment11();
  }
  if (_$unforgetCache2[4].n || setState !== _$unforgetCache2[2].v || state !== _$unforgetCache2[0].v) {
    _segment12();
    _$unforgetCache2[4].e(_unwrappedJsxEl3);
  }
  if (_$unforgetCache2[5].n || state !== _$unforgetCache2[0].v || text !== _$unforgetCache2[6].v) {
    _segment13();
    _$unforgetCache2[5].e(_unwrappedJsxEl4);
  }
  if (_$unforgetCache2[3].n || _unwrappedJsxEl3 !== _$unforgetCache2[4].v || _unwrappedJsxEl4 !== _$unforgetCache2[5].v) {
    _segment14();
    _$unforgetCache2[3].e(_unwrappedJsxEl5);
  }
  _$unforgetCommit2();
  return _unwrappedJsxEl5;
}"
`;

exports[`Component fixtures applyModification fixture_7 1`] = `
"import { useCreateCache$unforget } from "@react-unforget/runtime";
import { useState } from "react";
export default function CounterWithEarlyReturn() {
  const [_$unforgetCache, _$unforgetCommit, _$unforgetNull] = useCreateCache$unforget(
  /*
  0 => state
  1 => _unwrappedJsxEl6
  2 => _unwrappedJsxEl5
  3 => setState
  4 => _unwrapped
  5 => _unwrappedJsxEl4
  6 => _unwrappedJsxEl
  7 => _unwrappedJsxEl3
  8 => _unwrappedJsxEl2
  */
  9);
  let _unwrapped = _$unforgetCache[4].v;
  const _segment = () => {
    _unwrapped = useState(0);
  };
  let setState = _$unforgetCache[3].v;
  const _segment2 = () => {
    setState = _unwrapped[1];
  };
  let state = _$unforgetCache[0].v;
  const _segment3 = () => {
    state = _unwrapped[0];
  };
  const _segment4 = () => {
    if (state % 2 === 0) {
      let _unwrappedJsxEl5 = _$unforgetCache[2].v;
      const _segment10 = () => {
        _unwrappedJsxEl5 = <button onClick={() => setState(state + 1)}>Increment</button>;
      };
      let _unwrappedJsxEl6 = _$unforgetCache[1].v;
      const _segment11 = () => {
        _unwrappedJsxEl6 = <div>
        We're inside the early return
        {_unwrappedJsxEl5}
      </div>;
      };
      if (_$unforgetCache[2].n || setState !== _$unforgetCache[3].v || state !== _$unforgetCache[0].v) {
        _segment10();
        _$unforgetCache[2].e(_unwrappedJsxEl5);
      }
      if (_$unforgetCache[1].n || _unwrappedJsxEl5 !== _$unforgetCache[2].v) {
        _segment11();
        _$unforgetCache[1].e(_unwrappedJsxEl6);
      }
      _$unforgetCommit();
      return _unwrappedJsxEl6;
    }
    return _$unforgetNull;
  };
  let _unwrappedJsxEl = _$unforgetCache[6].v;
  const _segment5 = () => {
    _unwrappedJsxEl = <button onClick={() => setState(state + 1)}>Increment</button>;
  };
  let _unwrappedJsxEl2 = _$unforgetCache[8].v;
  const _segment6 = () => {
    _unwrappedJsxEl2 = <span>Count: {state}</span>;
  };
  let _unwrappedJsxEl3 = _$unforgetCache[7].v;
  const _segment7 = () => {
    _unwrappedJsxEl3 = <div>
        {_unwrappedJsxEl2}
      </div>;
  };
  let _unwrappedJsxEl4 = _$unforgetCache[5].v;
  const _segment8 = () => {
    _unwrappedJsxEl4 = <div>
      {_unwrappedJsxEl}
      {_unwrappedJsxEl3}
    </div>;
  };
  _segment();
  _$unforgetCache[4].e(_unwrapped);
  if (_$unforgetCache[3].n || _unwrapped !== _$unforgetCache[4].v || _unwrapped[1] !== _$unforgetCache[4].v[1]) {
    _segment2();
    _$unforgetCache[3].e(setState);
  }
  if (_$unforgetCache[0].n || _unwrapped !== _$unforgetCache[4].v || _unwrapped[0] !== _$unforgetCache[4].v[0]) {
    _segment3();
    _$unforgetCache[0].e(state);
  }
  if (state !== _$unforgetCache[0].v) {
    const _temp = _segment4();
    if (_temp !== _$unforgetNull) {
      return _temp;
    }
  }
  if (_$unforgetCache[6].n || setState !== _$unforgetCache[3].v || state !== _$unforgetCache[0].v) {
    _segment5();
    _$unforgetCache[6].e(_unwrappedJsxEl);
  }
  if (_$unforgetCache[8].n || state !== _$unforgetCache[0].v) {
    _segment6();
    _$unforgetCache[8].e(_unwrappedJsxEl2);
  }
  if (_$unforgetCache[7].n || _unwrappedJsxEl2 !== _$unforgetCache[8].v) {
    _segment7();
    _$unforgetCache[7].e(_unwrappedJsxEl3);
  }
  if (_$unforgetCache[5].n || _unwrappedJsxEl !== _$unforgetCache[6].v || _unwrappedJsxEl3 !== _$unforgetCache[7].v) {
    _segment8();
    _$unforgetCache[5].e(_unwrappedJsxEl4);
  }
  _$unforgetCommit();
  return _unwrappedJsxEl4;
}"
`;

exports[`Component fixtures applyModification fixture_8 1`] = `
"import { useCreateCache$unforget } from "@react-unforget/runtime";
import { useState } from "react";
export default function CounterWithEarlyReturnWithoutDirectlyUsingTheVariableInJSX() {
  const [_$unforgetCache, _$unforgetCommit, _$unforgetNull] = useCreateCache$unforget(
  /*
  0 => state
  1 => _unwrappedJsxEl5
  2 => _unwrapped
  3 => setState
  4 => _unwrappedJsxEl4
  5 => _unwrappedJsxEl
  6 => _unwrappedJsxEl3
  7 => _unwrappedJsxEl2
  */
  8);
  let _unwrapped = _$unforgetCache[2].v;
  const _segment = () => {
    _unwrapped = useState(0);
  };
  let setState = _$unforgetCache[3].v;
  const _segment2 = () => {
    setState = _unwrapped[1];
  };
  let state = _$unforgetCache[0].v;
  const _segment3 = () => {
    state = _unwrapped[0];
  };
  const _segment4 = () => {
    if (state % 2 === 1) {
      let _unwrappedJsxEl5 = _$unforgetCache[1].v;
      const _segment10 = () => {
        _unwrappedJsxEl5 = <div>We're inside the early return</div>;
      };
      if (_$unforgetCache[1].n) {
        _segment10();
        _$unforgetCache[1].e(_unwrappedJsxEl5);
      }
      _$unforgetCommit();
      return _unwrappedJsxEl5;
    }
    return _$unforgetNull;
  };
  let _unwrappedJsxEl = _$unforgetCache[5].v;
  const _segment5 = () => {
    _unwrappedJsxEl = <button onClick={() => setState(state + 1)}>Increment</button>;
  };
  let _unwrappedJsxEl2 = _$unforgetCache[7].v;
  const _segment6 = () => {
    _unwrappedJsxEl2 = <span>Count: {state}</span>;
  };
  let _unwrappedJsxEl3 = _$unforgetCache[6].v;
  const _segment7 = () => {
    _unwrappedJsxEl3 = <div>
        {_unwrappedJsxEl2}
      </div>;
  };
  let _unwrappedJsxEl4 = _$unforgetCache[4].v;
  const _segment8 = () => {
    _unwrappedJsxEl4 = <div>
      {_unwrappedJsxEl}
      {_unwrappedJsxEl3}
    </div>;
  };
  _segment();
  _$unforgetCache[2].e(_unwrapped);
  if (_$unforgetCache[3].n || _unwrapped[1] !== _$unforgetCache[2].v[1] || _unwrapped !== _$unforgetCache[2].v) {
    _segment2();
    _$unforgetCache[3].e(setState);
  }
  if (_$unforgetCache[0].n || _unwrapped !== _$unforgetCache[2].v || _unwrapped[0] !== _$unforgetCache[2].v[0]) {
    _segment3();
    _$unforgetCache[0].e(state);
  }
  if (state !== _$unforgetCache[0].v) {
    const _temp = _segment4();
    if (_temp !== _$unforgetNull) {
      return _temp;
    }
  }
  if (_$unforgetCache[5].n || setState !== _$unforgetCache[3].v || state !== _$unforgetCache[0].v) {
    _segment5();
    _$unforgetCache[5].e(_unwrappedJsxEl);
  }
  if (_$unforgetCache[7].n || state !== _$unforgetCache[0].v) {
    _segment6();
    _$unforgetCache[7].e(_unwrappedJsxEl2);
  }
  if (_$unforgetCache[6].n || _unwrappedJsxEl2 !== _$unforgetCache[7].v) {
    _segment7();
    _$unforgetCache[6].e(_unwrappedJsxEl3);
  }
  if (_$unforgetCache[4].n || _unwrappedJsxEl !== _$unforgetCache[5].v || _unwrappedJsxEl3 !== _$unforgetCache[6].v) {
    _segment8();
    _$unforgetCache[4].e(_unwrappedJsxEl4);
  }
  _$unforgetCommit();
  return _unwrappedJsxEl4;
}"
`;
